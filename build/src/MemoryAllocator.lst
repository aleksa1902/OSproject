GAS LISTING /tmp/ccR7UfCN.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator8memAllocEv
   9              	_ZN15MemoryAllocator8memAllocEv:
  10              	.LFB0:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** //
   2:src/MemoryAllocator.cpp **** // Created by os on 5/14/22.
   3:src/MemoryAllocator.cpp **** //
   4:src/MemoryAllocator.cpp **** 
   5:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.hpp"
   6:src/MemoryAllocator.cpp **** 
   7:src/MemoryAllocator.cpp **** MemoryBloc* MemoryAllocator::freeMemBlocHead;
   8:src/MemoryAllocator.cpp **** MemoryBloc* MemoryAllocator::takenMemBlocHead;
   9:src/MemoryAllocator.cpp **** 
  10:src/MemoryAllocator.cpp **** // Inicijalizacija memorije
  11:src/MemoryAllocator.cpp **** void MemoryAllocator::memAlloc(){
  12              		.loc 1 11 33
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/MemoryAllocator.cpp ****     freeMemBlocHead = (MemoryBloc*)HEAP_START_ADDR;
  20              		.loc 1 12 5
  21              		.loc 1 12 21 is_stmt 0
  22 000c 97070000 		la	a5,HEAP_START_ADDR
  22      83B70700 
  23 0014 03B70700 		ld	a4,0(a5)
  24 0018 97070000 		lla	a5,.LANCHOR0
  24      93870700 
  25 0020 23B0E700 		sd	a4,0(a5)
  13:src/MemoryAllocator.cpp ****     freeMemBlocHead->size = ((size_t)HEAP_END_ADDR - (size_t)HEAP_START_ADDR);
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 52 is_stmt 0
  28 0024 97060000 		la	a3,HEAP_END_ADDR
  28      83B60600 
  29 002c 83B60600 		ld	a3,0(a3)
  30 0030 B386E640 		sub	a3,a3,a4
  31              		.loc 1 13 27
  32 0034 2330D700 		sd	a3,0(a4)
  14:src/MemoryAllocator.cpp ****     freeMemBlocHead->next = nullptr;
  33              		.loc 1 14 5 is_stmt 1
  34              		.loc 1 14 22 is_stmt 0
  35 0038 03B70700 		ld	a4,0(a5)
  36              		.loc 1 14 27
  37 003c 23340700 		sd	zero,8(a4)
  15:src/MemoryAllocator.cpp **** 
  16:src/MemoryAllocator.cpp ****     takenMemBlocHead = nullptr;
  38              		.loc 1 16 5 is_stmt 1
  39              		.loc 1 16 22 is_stmt 0
GAS LISTING /tmp/ccR7UfCN.s 			page 2


  40 0040 23B40700 		sd	zero,8(a5)
  17:src/MemoryAllocator.cpp **** }
  41              		.loc 1 17 1
  42 0044 03348100 		ld	s0,8(sp)
  43              		.cfi_restore 8
  44              		.cfi_def_cfa 2, 16
  45 0048 13010101 		addi	sp,sp,16
  46              		.cfi_def_cfa_offset 0
  47 004c 67800000 		jr	ra
  48              		.cfi_endproc
  49              	.LFE0:
  51              		.align	2
  52              		.globl	_ZN15MemoryAllocator9mem_allocEm
  54              	_ZN15MemoryAllocator9mem_allocEm:
  55              	.LFB1:
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp **** void* MemoryAllocator::mem_alloc (size_t size){
  56              		.loc 1 19 47 is_stmt 1
  57              		.cfi_startproc
  58              	.LVL0:
  59 0050 130101FF 		addi	sp,sp,-16
  60              		.cfi_def_cfa_offset 16
  61 0054 23348100 		sd	s0,8(sp)
  62              		.cfi_offset 8, -8
  63 0058 13040101 		addi	s0,sp,16
  64              		.cfi_def_cfa 8, 0
  20:src/MemoryAllocator.cpp ****     size_t newSize;
  65              		.loc 1 20 5
  21:src/MemoryAllocator.cpp **** 
  22:src/MemoryAllocator.cpp ****     // ako je velicina veca od MEM_BLOC_SIZE onda uzmi blokova koliko ti treba + sizeof(MemoryBloc)
  23:src/MemoryAllocator.cpp ****     // u suprotnom samo MEM_BLOC_SIZE + sizeof(MemoryBloc)
  24:src/MemoryAllocator.cpp ****     if(size > MEM_BLOCK_SIZE){
  66              		.loc 1 24 5
  67 005c 93070004 		li	a5,64
  68 0060 63FAA702 		bleu	a0,a5,.L19
  25:src/MemoryAllocator.cpp ****         newSize = ((size / MEM_BLOCK_SIZE) + 1) * MEM_BLOCK_SIZE + sizeof(MemoryBloc);
  69              		.loc 1 25 9
  70              		.loc 1 25 26 is_stmt 0
  71 0064 13576500 		srli	a4,a0,6
  72              		.loc 1 25 44
  73 0068 13071700 		addi	a4,a4,1
  74              		.loc 1 25 49
  75 006c 13176700 		slli	a4,a4,6
  76              		.loc 1 25 17
  77 0070 13070701 		addi	a4,a4,16
  78              	.LVL1:
  79              	.L4:
  26:src/MemoryAllocator.cpp ****     }else{
  27:src/MemoryAllocator.cpp ****         newSize = MEM_BLOCK_SIZE + sizeof(MemoryBloc);
  28:src/MemoryAllocator.cpp ****     }
  29:src/MemoryAllocator.cpp **** 
  30:src/MemoryAllocator.cpp ****     // trazim prvi slobodan blok u listi slobodnih blokova gde mogu da alociram
  31:src/MemoryAllocator.cpp ****     MemoryBloc* curr = freeMemBlocHead;
  80              		.loc 1 31 5 is_stmt 1
  81              		.loc 1 31 17 is_stmt 0
  82 0074 17060000 		ld	a2,.LANCHOR0
  82      03360600 
GAS LISTING /tmp/ccR7UfCN.s 			page 3


  83              	.LVL2:
  84 007c 13050600 		mv	a0,a2
  85              	.LVL3:
  86              	.L6:
  32:src/MemoryAllocator.cpp **** 
  33:src/MemoryAllocator.cpp ****     while(newSize > curr->size && curr != nullptr){
  87              		.loc 1 33 5 is_stmt 1
  88              		.loc 1 33 32
  89              		.loc 1 33 27 is_stmt 0
  90 0080 83370500 		ld	a5,0(a0)
  91              		.loc 1 33 32
  92 0084 63FCE700 		bgeu	a5,a4,.L5
  93              		.loc 1 33 32 discriminator 1
  94 0088 630A0500 		beqz	a0,.L5
  34:src/MemoryAllocator.cpp ****         curr = curr->next;
  95              		.loc 1 34 9 is_stmt 1
  96              		.loc 1 34 14 is_stmt 0
  97 008c 03358500 		ld	a0,8(a0)
  98              	.LVL4:
  33:src/MemoryAllocator.cpp ****         curr = curr->next;
  99              		.loc 1 33 5
 100 0090 6FF01FFF 		j	.L6
 101              	.LVL5:
 102              	.L19:
  27:src/MemoryAllocator.cpp ****     }
 103              		.loc 1 27 17
 104 0094 13070005 		li	a4,80
 105 0098 6FF0DFFD 		j	.L4
 106              	.LVL6:
 107              	.L5:
  35:src/MemoryAllocator.cpp ****     }
  36:src/MemoryAllocator.cpp **** 
  37:src/MemoryAllocator.cpp ****     if(curr == nullptr){
 108              		.loc 1 37 5 is_stmt 1
 109 009c 63180500 		bnez	a0,.L24
 110              	.LVL7:
 111              	.L3:
  38:src/MemoryAllocator.cpp ****         return nullptr;
  39:src/MemoryAllocator.cpp ****     }
  40:src/MemoryAllocator.cpp **** 
  41:src/MemoryAllocator.cpp ****     bool checkFree = false;
  42:src/MemoryAllocator.cpp ****     if(curr == freeMemBlocHead){
  43:src/MemoryAllocator.cpp ****         checkFree = true;
  44:src/MemoryAllocator.cpp ****     }
  45:src/MemoryAllocator.cpp **** 
  46:src/MemoryAllocator.cpp ****     // zapamti
  47:src/MemoryAllocator.cpp ****     MemoryBloc* next = curr->next;
  48:src/MemoryAllocator.cpp ****     size_t currSize = curr->size - newSize;
  49:src/MemoryAllocator.cpp **** 
  50:src/MemoryAllocator.cpp ****     // novi alocirani blok
  51:src/MemoryAllocator.cpp ****     MemoryBloc* newBloc;
  52:src/MemoryAllocator.cpp ****     newBloc = curr;
  53:src/MemoryAllocator.cpp **** 
  54:src/MemoryAllocator.cpp ****     // ja ovde proveravam da li sam ispraznio blok
  55:src/MemoryAllocator.cpp ****     if(currSize == 0){
  56:src/MemoryAllocator.cpp ****         // prethoni mi treba
  57:src/MemoryAllocator.cpp ****         MemoryBloc* currFree = freeMemBlocHead;
GAS LISTING /tmp/ccR7UfCN.s 			page 4


  58:src/MemoryAllocator.cpp ****         while(currFree != nullptr && currFree->next != curr && checkFree != true){
  59:src/MemoryAllocator.cpp ****             currFree = currFree->next;
  60:src/MemoryAllocator.cpp ****         }
  61:src/MemoryAllocator.cpp **** 
  62:src/MemoryAllocator.cpp ****         if(currFree == freeMemBlocHead){
  63:src/MemoryAllocator.cpp ****             freeMemBlocHead = freeMemBlocHead->next;
  64:src/MemoryAllocator.cpp ****         }else {
  65:src/MemoryAllocator.cpp ****             currFree->next = curr->next;
  66:src/MemoryAllocator.cpp ****         }
  67:src/MemoryAllocator.cpp ****     }else if(checkFree == true){
  68:src/MemoryAllocator.cpp ****         freeMemBlocHead = (MemoryBloc*)((char*)freeMemBlocHead + newSize);
  69:src/MemoryAllocator.cpp ****         freeMemBlocHead->size = currSize;
  70:src/MemoryAllocator.cpp ****         freeMemBlocHead->next = next;
  71:src/MemoryAllocator.cpp ****     }else{
  72:src/MemoryAllocator.cpp ****         curr = (MemoryBloc*)((char*)curr + newSize);
  73:src/MemoryAllocator.cpp ****         curr->size = currSize;
  74:src/MemoryAllocator.cpp ****         curr->next = next;
  75:src/MemoryAllocator.cpp ****     }
  76:src/MemoryAllocator.cpp **** 
  77:src/MemoryAllocator.cpp ****     newBloc->size = newSize;
  78:src/MemoryAllocator.cpp **** 
  79:src/MemoryAllocator.cpp ****     // ako ne postoji ni jedan zauzet blok, dodaj mu newBloc
  80:src/MemoryAllocator.cpp ****     if(takenMemBlocHead == nullptr){
  81:src/MemoryAllocator.cpp ****         takenMemBlocHead = newBloc;
  82:src/MemoryAllocator.cpp ****         newBloc->next = nullptr;
  83:src/MemoryAllocator.cpp ****     }else{
  84:src/MemoryAllocator.cpp ****         // ukoliko postoje zauzeti blokovi onda nadji tacno mesto u listi gde ovo moze da stane
  85:src/MemoryAllocator.cpp ****         MemoryBloc* nextTaken = takenMemBlocHead;
  86:src/MemoryAllocator.cpp ****         MemoryBloc* prevTaken = nullptr;
  87:src/MemoryAllocator.cpp ****         while (newBloc > nextTaken && nextTaken != nullptr){
  88:src/MemoryAllocator.cpp ****             prevTaken = nextTaken;
  89:src/MemoryAllocator.cpp ****             nextTaken = nextTaken->next;
  90:src/MemoryAllocator.cpp ****         }
  91:src/MemoryAllocator.cpp **** 
  92:src/MemoryAllocator.cpp ****         if(nextTaken == takenMemBlocHead){
  93:src/MemoryAllocator.cpp ****             newBloc->next = takenMemBlocHead;
  94:src/MemoryAllocator.cpp ****             takenMemBlocHead = newBloc;
  95:src/MemoryAllocator.cpp ****         }else{
  96:src/MemoryAllocator.cpp ****             newBloc->next = nextTaken;
  97:src/MemoryAllocator.cpp ****             prevTaken->next = newBloc;
  98:src/MemoryAllocator.cpp ****         }
  99:src/MemoryAllocator.cpp ****     }
 100:src/MemoryAllocator.cpp **** 
 101:src/MemoryAllocator.cpp ****     return (void*)((char*)newBloc + sizeof(MemoryBloc));
 102:src/MemoryAllocator.cpp **** };
 112              		.loc 1 102 1 is_stmt 0
 113 00a0 03348100 		ld	s0,8(sp)
 114              		.cfi_remember_state
 115              		.cfi_restore 8
 116              		.cfi_def_cfa 2, 16
 117 00a4 13010101 		addi	sp,sp,16
 118              		.cfi_def_cfa_offset 0
 119 00a8 67800000 		jr	ra
 120              	.LVL8:
 121              	.L24:
 122              		.cfi_restore_state
  41:src/MemoryAllocator.cpp ****     if(curr == freeMemBlocHead){
GAS LISTING /tmp/ccR7UfCN.s 			page 5


 123              		.loc 1 41 5 is_stmt 1
  42:src/MemoryAllocator.cpp ****         checkFree = true;
 124              		.loc 1 42 5
 125 00ac 630EC500 		beq	a0,a2,.L20
  41:src/MemoryAllocator.cpp ****     if(curr == freeMemBlocHead){
 126              		.loc 1 41 10 is_stmt 0
 127 00b0 93050000 		li	a1,0
 128              	.L8:
 129              	.LVL9:
  47:src/MemoryAllocator.cpp ****     size_t currSize = curr->size - newSize;
 130              		.loc 1 47 5 is_stmt 1
  47:src/MemoryAllocator.cpp ****     size_t currSize = curr->size - newSize;
 131              		.loc 1 47 17 is_stmt 0
 132 00b4 03388500 		ld	a6,8(a0)
 133              	.LVL10:
  48:src/MemoryAllocator.cpp **** 
 134              		.loc 1 48 5 is_stmt 1
  48:src/MemoryAllocator.cpp **** 
 135              		.loc 1 48 12 is_stmt 0
 136 00b8 B386E740 		sub	a3,a5,a4
 137              	.LVL11:
  51:src/MemoryAllocator.cpp ****     newBloc = curr;
 138              		.loc 1 51 5 is_stmt 1
  52:src/MemoryAllocator.cpp **** 
 139              		.loc 1 52 5
  55:src/MemoryAllocator.cpp ****         // prethoni mi treba
 140              		.loc 1 55 5
 141              	.LBB2:
 142 00bc 6396E706 		bne	a5,a4,.L9
 143              	.LBB3:
  57:src/MemoryAllocator.cpp ****         while(currFree != nullptr && currFree->next != curr && checkFree != true){
 144              		.loc 1 57 21 is_stmt 0
 145 00c0 93070600 		mv	a5,a2
 146 00c4 6F000001 		j	.L11
 147              	.LVL12:
 148              	.L20:
 149              	.LBE3:
 150              	.LBE2:
  43:src/MemoryAllocator.cpp ****     }
 151              		.loc 1 43 19
 152 00c8 93051000 		li	a1,1
 153 00cc 6FF09FFE 		j	.L8
 154              	.LVL13:
 155              	.L21:
 156              	.LBB6:
 157              	.LBB4:
  59:src/MemoryAllocator.cpp ****         }
 158              		.loc 1 59 22
 159 00d0 93870600 		mv	a5,a3
 160              	.LVL14:
 161              	.L11:
  58:src/MemoryAllocator.cpp ****             currFree = currFree->next;
 162              		.loc 1 58 9 is_stmt 1
  58:src/MemoryAllocator.cpp ****             currFree = currFree->next;
 163              		.loc 1 58 61
 164 00d4 63880700 		beqz	a5,.L10
  58:src/MemoryAllocator.cpp ****             currFree = currFree->next;
GAS LISTING /tmp/ccR7UfCN.s 			page 6


 165              		.loc 1 58 48 is_stmt 0 discriminator 1
 166 00d8 83B68700 		ld	a3,8(a5)
  58:src/MemoryAllocator.cpp ****             currFree = currFree->next;
 167              		.loc 1 58 35 discriminator 1
 168 00dc 6384A600 		beq	a3,a0,.L10
  58:src/MemoryAllocator.cpp ****             currFree = currFree->next;
 169              		.loc 1 58 61 discriminator 2
 170 00e0 E38805FE 		beqz	a1,.L21
 171              	.L10:
  62:src/MemoryAllocator.cpp ****             freeMemBlocHead = freeMemBlocHead->next;
 172              		.loc 1 62 9 is_stmt 1
 173 00e4 638AC702 		beq	a5,a2,.L25
  65:src/MemoryAllocator.cpp ****         }
 174              		.loc 1 65 13
  65:src/MemoryAllocator.cpp ****         }
 175              		.loc 1 65 28 is_stmt 0
 176 00e8 23B40701 		sd	a6,8(a5)
 177              	.LVL15:
 178              	.L13:
 179              	.LBE4:
 180              	.LBE6:
  77:src/MemoryAllocator.cpp **** 
 181              		.loc 1 77 5 is_stmt 1
  77:src/MemoryAllocator.cpp **** 
 182              		.loc 1 77 19 is_stmt 0
 183 00ec 2330E500 		sd	a4,0(a0)
  80:src/MemoryAllocator.cpp ****         takenMemBlocHead = newBloc;
 184              		.loc 1 80 5 is_stmt 1
 185              	.LBB7:
  80:src/MemoryAllocator.cpp ****         takenMemBlocHead = newBloc;
 186              		.loc 1 80 25 is_stmt 0
 187 00f0 97060000 		ld	a3,.LANCHOR0+8
 187      83B60600 
  80:src/MemoryAllocator.cpp ****         takenMemBlocHead = newBloc;
 188              		.loc 1 80 5
 189 00f8 63820606 		beqz	a3,.L26
 190              	.LBB8:
  85:src/MemoryAllocator.cpp ****         MemoryBloc* prevTaken = nullptr;
 191              		.loc 1 85 21
 192 00fc 93870600 		mv	a5,a3
  86:src/MemoryAllocator.cpp ****         while (newBloc > nextTaken && nextTaken != nullptr){
 193              		.loc 1 86 21
 194 0100 13070000 		li	a4,0
 195              	.LVL16:
 196              	.L15:
  87:src/MemoryAllocator.cpp ****             prevTaken = nextTaken;
 197              		.loc 1 87 9 is_stmt 1
  87:src/MemoryAllocator.cpp ****             prevTaken = nextTaken;
 198              		.loc 1 87 36
 199 0104 63F4A706 		bleu	a0,a5,.L17
  87:src/MemoryAllocator.cpp ****             prevTaken = nextTaken;
 200              		.loc 1 87 36 is_stmt 0 discriminator 1
 201 0108 63820706 		beqz	a5,.L17
  88:src/MemoryAllocator.cpp ****             nextTaken = nextTaken->next;
 202              		.loc 1 88 13 is_stmt 1
 203              	.LVL17:
  89:src/MemoryAllocator.cpp ****         }
GAS LISTING /tmp/ccR7UfCN.s 			page 7


 204              		.loc 1 89 13
  88:src/MemoryAllocator.cpp ****             nextTaken = nextTaken->next;
 205              		.loc 1 88 23 is_stmt 0
 206 010c 13870700 		mv	a4,a5
  89:src/MemoryAllocator.cpp ****         }
 207              		.loc 1 89 23
 208 0110 83B78700 		ld	a5,8(a5)
 209              	.LVL18:
  87:src/MemoryAllocator.cpp ****             prevTaken = nextTaken;
 210              		.loc 1 87 9
 211 0114 6FF01FFF 		j	.L15
 212              	.LVL19:
 213              	.L25:
 214              	.LBE8:
 215              	.LBE7:
 216              	.LBB11:
 217              	.LBB5:
  63:src/MemoryAllocator.cpp ****         }else {
 218              		.loc 1 63 13 is_stmt 1
  63:src/MemoryAllocator.cpp ****         }else {
 219              		.loc 1 63 48 is_stmt 0
 220 0118 83378600 		ld	a5,8(a2)
 221              	.LVL20:
  63:src/MemoryAllocator.cpp ****         }else {
 222              		.loc 1 63 29
 223 011c 97060000 		sd	a5,.LANCHOR0,a3
 223      23B0F600 
 224              	.LVL21:
 225 0124 6FF09FFC 		j	.L13
 226              	.LVL22:
 227              	.L9:
 228              	.LBE5:
  67:src/MemoryAllocator.cpp ****         freeMemBlocHead = (MemoryBloc*)((char*)freeMemBlocHead + newSize);
 229              		.loc 1 67 11 is_stmt 1
 230 0128 63820502 		beqz	a1,.L14
  68:src/MemoryAllocator.cpp ****         freeMemBlocHead->size = currSize;
 231              		.loc 1 68 9
  68:src/MemoryAllocator.cpp ****         freeMemBlocHead->size = currSize;
 232              		.loc 1 68 27 is_stmt 0
 233 012c 3306E600 		add	a2,a2,a4
  68:src/MemoryAllocator.cpp ****         freeMemBlocHead->size = currSize;
 234              		.loc 1 68 25
 235 0130 97070000 		lla	a5,.LANCHOR0
 235      93870700 
 236 0138 23B0C700 		sd	a2,0(a5)
  69:src/MemoryAllocator.cpp ****         freeMemBlocHead->next = next;
 237              		.loc 1 69 9 is_stmt 1
  69:src/MemoryAllocator.cpp ****         freeMemBlocHead->next = next;
 238              		.loc 1 69 31 is_stmt 0
 239 013c 2330D600 		sd	a3,0(a2)
  70:src/MemoryAllocator.cpp ****     }else{
 240              		.loc 1 70 9 is_stmt 1
  70:src/MemoryAllocator.cpp ****     }else{
 241              		.loc 1 70 26 is_stmt 0
 242 0140 83B70700 		ld	a5,0(a5)
  70:src/MemoryAllocator.cpp ****     }else{
 243              		.loc 1 70 31
GAS LISTING /tmp/ccR7UfCN.s 			page 8


 244 0144 23B40701 		sd	a6,8(a5)
 245 0148 6FF05FFA 		j	.L13
 246              	.L14:
  72:src/MemoryAllocator.cpp ****         curr->size = currSize;
 247              		.loc 1 72 9 is_stmt 1
  72:src/MemoryAllocator.cpp ****         curr->size = currSize;
 248              		.loc 1 72 14 is_stmt 0
 249 014c B307E500 		add	a5,a0,a4
 250              	.LVL23:
  73:src/MemoryAllocator.cpp ****         curr->next = next;
 251              		.loc 1 73 9 is_stmt 1
  73:src/MemoryAllocator.cpp ****         curr->next = next;
 252              		.loc 1 73 20 is_stmt 0
 253 0150 23B0D700 		sd	a3,0(a5)
  74:src/MemoryAllocator.cpp ****     }
 254              		.loc 1 74 9 is_stmt 1
  74:src/MemoryAllocator.cpp ****     }
 255              		.loc 1 74 20 is_stmt 0
 256 0154 23B40701 		sd	a6,8(a5)
 257 0158 6FF05FF9 		j	.L13
 258              	.LVL24:
 259              	.L26:
 260              	.LBE11:
 261              	.LBB12:
  81:src/MemoryAllocator.cpp ****         newBloc->next = nullptr;
 262              		.loc 1 81 9 is_stmt 1
  81:src/MemoryAllocator.cpp ****         newBloc->next = nullptr;
 263              		.loc 1 81 26 is_stmt 0
 264 015c 97070000 		sd	a0,.LANCHOR0+8,a5
 264      23B0A700 
  82:src/MemoryAllocator.cpp ****     }else{
 265              		.loc 1 82 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****     }else{
 266              		.loc 1 82 23 is_stmt 0
 267 0164 23340500 		sd	zero,8(a0)
 268 0168 6F000001 		j	.L16
 269              	.LVL25:
 270              	.L17:
 271              	.LBB9:
  92:src/MemoryAllocator.cpp ****             newBloc->next = takenMemBlocHead;
 272              		.loc 1 92 9 is_stmt 1
 273 016c 638AF600 		beq	a3,a5,.L27
  96:src/MemoryAllocator.cpp ****             prevTaken->next = newBloc;
 274              		.loc 1 96 13
  96:src/MemoryAllocator.cpp ****             prevTaken->next = newBloc;
 275              		.loc 1 96 27 is_stmt 0
 276 0170 2334F500 		sd	a5,8(a0)
  97:src/MemoryAllocator.cpp ****         }
 277              		.loc 1 97 13 is_stmt 1
  97:src/MemoryAllocator.cpp ****         }
 278              		.loc 1 97 29 is_stmt 0
 279 0174 2334A700 		sd	a0,8(a4)
 280              	.LVL26:
 281              	.L16:
 282              	.LBE9:
 283              	.LBE12:
 101:src/MemoryAllocator.cpp **** };
GAS LISTING /tmp/ccR7UfCN.s 			page 9


 284              		.loc 1 101 5 is_stmt 1
 101:src/MemoryAllocator.cpp **** };
 285              		.loc 1 101 55 is_stmt 0
 286 0178 13050501 		addi	a0,a0,16
 287              	.LVL27:
 288 017c 6FF05FF2 		j	.L3
 289              	.LVL28:
 290              	.L27:
 291              	.LBB13:
 292              	.LBB10:
  93:src/MemoryAllocator.cpp ****             takenMemBlocHead = newBloc;
 293              		.loc 1 93 13 is_stmt 1
  93:src/MemoryAllocator.cpp ****             takenMemBlocHead = newBloc;
 294              		.loc 1 93 27 is_stmt 0
 295 0180 2334D500 		sd	a3,8(a0)
  94:src/MemoryAllocator.cpp ****         }else{
 296              		.loc 1 94 13 is_stmt 1
  94:src/MemoryAllocator.cpp ****         }else{
 297              		.loc 1 94 30 is_stmt 0
 298 0184 97070000 		sd	a0,.LANCHOR0+8,a5
 298      23B0A700 
 299              	.LVL29:
 300 018c 6FF0DFFE 		j	.L16
 301              	.LBE10:
 302              	.LBE13:
 303              		.cfi_endproc
 304              	.LFE1:
 306              		.align	2
 307              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 309              	_ZN15MemoryAllocator8mem_freeEPv:
 310              	.LFB2:
 103:src/MemoryAllocator.cpp **** 
 104:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free (void* mem){
 311              		.loc 1 104 42 is_stmt 1
 312              		.cfi_startproc
 313              	.LVL30:
 314 0190 130101FF 		addi	sp,sp,-16
 315              		.cfi_def_cfa_offset 16
 316 0194 23348100 		sd	s0,8(sp)
 317              		.cfi_offset 8, -8
 318 0198 13040101 		addi	s0,sp,16
 319              		.cfi_def_cfa 8, 0
 105:src/MemoryAllocator.cpp ****     void* freeCurr = (void*)((char*)mem - sizeof(MemoryBloc));
 320              		.loc 1 105 5
 321              		.loc 1 105 11 is_stmt 0
 322 019c 130505FF 		addi	a0,a0,-16
 323              	.LVL31:
 106:src/MemoryAllocator.cpp **** 
 107:src/MemoryAllocator.cpp ****     MemoryBloc* curr = takenMemBlocHead;
 324              		.loc 1 107 5 is_stmt 1
 325              		.loc 1 107 17 is_stmt 0
 326 01a0 97060000 		ld	a3,.LANCHOR0+8
 326      83B60600 
 327              	.LVL32:
 108:src/MemoryAllocator.cpp ****     MemoryBloc* prev = nullptr;
 328              		.loc 1 108 5 is_stmt 1
 107:src/MemoryAllocator.cpp ****     MemoryBloc* prev = nullptr;
GAS LISTING /tmp/ccR7UfCN.s 			page 10


 329              		.loc 1 107 17 is_stmt 0
 330 01a8 93870600 		mv	a5,a3
 331              		.loc 1 108 17
 332 01ac 13070000 		li	a4,0
 333              	.LVL33:
 334              	.L30:
 109:src/MemoryAllocator.cpp **** 
 110:src/MemoryAllocator.cpp ****     while (curr != freeCurr){
 335              		.loc 1 110 5 is_stmt 1
 336              		.loc 1 110 17
 337 01b0 6388A700 		beq	a5,a0,.L29
 111:src/MemoryAllocator.cpp ****         prev = curr;
 338              		.loc 1 111 9
 339              	.LVL34:
 112:src/MemoryAllocator.cpp ****         curr = curr->next;
 340              		.loc 1 112 9
 111:src/MemoryAllocator.cpp ****         prev = curr;
 341              		.loc 1 111 14 is_stmt 0
 342 01b4 13870700 		mv	a4,a5
 343              		.loc 1 112 14
 344 01b8 83B78700 		ld	a5,8(a5)
 345              	.LVL35:
 110:src/MemoryAllocator.cpp ****         prev = curr;
 346              		.loc 1 110 5
 347 01bc 6FF05FFF 		j	.L30
 348              	.L29:
 113:src/MemoryAllocator.cpp ****     }
 114:src/MemoryAllocator.cpp ****     // uraditi nepredvidjeno ponasanje ako hocu da dealociram nesto sto nisam alocirao
 115:src/MemoryAllocator.cpp ****     if(curr == takenMemBlocHead){
 349              		.loc 1 115 5 is_stmt 1
 350 01c0 6388D702 		beq	a5,a3,.L42
 116:src/MemoryAllocator.cpp ****         takenMemBlocHead = takenMemBlocHead->next;
 117:src/MemoryAllocator.cpp ****     }else{
 118:src/MemoryAllocator.cpp ****         prev->next = curr->next;
 351              		.loc 1 118 9
 352              		.loc 1 118 28 is_stmt 0
 353 01c4 83B68700 		ld	a3,8(a5)
 354              		.loc 1 118 20
 355 01c8 2334D700 		sd	a3,8(a4)
 356              	.LVL36:
 357              	.L32:
 119:src/MemoryAllocator.cpp ****     }
 120:src/MemoryAllocator.cpp **** 
 121:src/MemoryAllocator.cpp ****     if(freeMemBlocHead == nullptr){
 358              		.loc 1 121 5 is_stmt 1
 359              	.LBB14:
 360              		.loc 1 121 24 is_stmt 0
 361 01cc 17060000 		ld	a2,.LANCHOR0
 361      03360600 
 362              		.loc 1 121 5
 363 01d4 63060602 		beqz	a2,.L43
 364              	.LBB15:
 122:src/MemoryAllocator.cpp ****         freeMemBlocHead = curr;
 123:src/MemoryAllocator.cpp ****     }else{
 124:src/MemoryAllocator.cpp ****         MemoryBloc* currFree = freeMemBlocHead;
 365              		.loc 1 124 21
 366 01d8 13070600 		mv	a4,a2
GAS LISTING /tmp/ccR7UfCN.s 			page 11


 125:src/MemoryAllocator.cpp ****         MemoryBloc* prevFree = nullptr;
 367              		.loc 1 125 21
 368 01dc 93060000 		li	a3,0
 369              	.L33:
 370              	.LVL37:
 126:src/MemoryAllocator.cpp **** 
 127:src/MemoryAllocator.cpp ****         while(curr > currFree){
 371              		.loc 1 127 9 is_stmt 1
 372              		.loc 1 127 20
 373 01e0 6376F702 		bleu	a5,a4,.L35
 128:src/MemoryAllocator.cpp ****             prevFree = currFree;
 374              		.loc 1 128 13
 375              	.LVL38:
 129:src/MemoryAllocator.cpp ****             currFree = currFree->next;
 376              		.loc 1 129 13
 128:src/MemoryAllocator.cpp ****             prevFree = currFree;
 377              		.loc 1 128 22 is_stmt 0
 378 01e4 93060700 		mv	a3,a4
 379              		.loc 1 129 22
 380 01e8 03378700 		ld	a4,8(a4)
 381              	.LVL39:
 127:src/MemoryAllocator.cpp ****             prevFree = currFree;
 382              		.loc 1 127 9
 383 01ec 6FF05FFF 		j	.L33
 384              	.LVL40:
 385              	.L42:
 386              	.LBE15:
 387              	.LBE14:
 116:src/MemoryAllocator.cpp ****     }else{
 388              		.loc 1 116 9 is_stmt 1
 116:src/MemoryAllocator.cpp ****     }else{
 389              		.loc 1 116 46 is_stmt 0
 390 01f0 03B78600 		ld	a4,8(a3)
 391              	.LVL41:
 116:src/MemoryAllocator.cpp ****     }else{
 392              		.loc 1 116 26
 393 01f4 97060000 		sd	a4,.LANCHOR0+8,a3
 393      23B0E600 
 394 01fc 6FF01FFD 		j	.L32
 395              	.L43:
 396              	.LBB18:
 122:src/MemoryAllocator.cpp ****     }else{
 397              		.loc 1 122 9 is_stmt 1
 122:src/MemoryAllocator.cpp ****     }else{
 398              		.loc 1 122 25 is_stmt 0
 399 0200 17070000 		sd	a5,.LANCHOR0,a4
 399      2330F700 
 400 0208 6F000001 		j	.L34
 401              	.LVL42:
 402              	.L35:
 403              	.LBB16:
 130:src/MemoryAllocator.cpp ****         }
 131:src/MemoryAllocator.cpp **** 
 132:src/MemoryAllocator.cpp ****         if(currFree == freeMemBlocHead){
 404              		.loc 1 132 9 is_stmt 1
 405 020c 630CE600 		beq	a2,a4,.L44
 133:src/MemoryAllocator.cpp ****             curr->next = freeMemBlocHead;
GAS LISTING /tmp/ccR7UfCN.s 			page 12


 134:src/MemoryAllocator.cpp ****             freeMemBlocHead = curr;
 135:src/MemoryAllocator.cpp ****         }else{
 136:src/MemoryAllocator.cpp ****             curr->next = currFree;
 406              		.loc 1 136 13
 407              		.loc 1 136 24 is_stmt 0
 408 0210 23B4E700 		sd	a4,8(a5)
 137:src/MemoryAllocator.cpp ****             prevFree->next = curr;
 409              		.loc 1 137 13 is_stmt 1
 410              		.loc 1 137 28 is_stmt 0
 411 0214 23B4F600 		sd	a5,8(a3)
 412              	.LVL43:
 413              	.L34:
 414              	.LBE16:
 415              	.LBE18:
 138:src/MemoryAllocator.cpp ****         }
 139:src/MemoryAllocator.cpp ****     }
 140:src/MemoryAllocator.cpp **** 
 141:src/MemoryAllocator.cpp ****     MemoryBloc* currMemMerge = freeMemBlocHead;
 416              		.loc 1 141 5 is_stmt 1
 417              		.loc 1 141 17 is_stmt 0
 418 0218 97070000 		ld	a5,.LANCHOR0
 418      83B70700 
 419              	.LVL44:
 420 0220 6F000003 		j	.L37
 421              	.LVL45:
 422              	.L44:
 423              	.LBB19:
 424              	.LBB17:
 133:src/MemoryAllocator.cpp ****             freeMemBlocHead = curr;
 425              		.loc 1 133 13 is_stmt 1
 133:src/MemoryAllocator.cpp ****             freeMemBlocHead = curr;
 426              		.loc 1 133 24 is_stmt 0
 427 0224 23B4C700 		sd	a2,8(a5)
 134:src/MemoryAllocator.cpp ****         }else{
 428              		.loc 1 134 13 is_stmt 1
 134:src/MemoryAllocator.cpp ****         }else{
 429              		.loc 1 134 29 is_stmt 0
 430 0228 17070000 		sd	a5,.LANCHOR0,a4
 430      2330F700 
 431              	.LVL46:
 432 0230 6FF09FFE 		j	.L34
 433              	.LVL47:
 434              	.L45:
 435              	.LBE17:
 436              	.LBE19:
 142:src/MemoryAllocator.cpp **** 
 143:src/MemoryAllocator.cpp ****     while(currMemMerge){
 144:src/MemoryAllocator.cpp ****         if(currMemMerge->next != nullptr && (char*)currMemMerge + currMemMerge->size == (char*)curr
 145:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 437              		.loc 1 145 13 is_stmt 1
 438              		.loc 1 145 55 is_stmt 0
 439 0234 03360700 		ld	a2,0(a4)
 440              		.loc 1 145 32
 441 0238 B386C600 		add	a3,a3,a2
 442 023c 23B0D700 		sd	a3,0(a5)
 146:src/MemoryAllocator.cpp ****             currMemMerge->next = currMemMerge->next->next;
 443              		.loc 1 146 13 is_stmt 1
GAS LISTING /tmp/ccR7UfCN.s 			page 13


 444              		.loc 1 146 54 is_stmt 0
 445 0240 03378700 		ld	a4,8(a4)
 446              		.loc 1 146 32
 447 0244 23B4E700 		sd	a4,8(a5)
 448 0248 13870700 		mv	a4,a5
 449              	.L39:
 450 024c 93070700 		mv	a5,a4
 451              	.LVL48:
 452              	.L37:
 143:src/MemoryAllocator.cpp ****         if(currMemMerge->next != nullptr && (char*)currMemMerge + currMemMerge->size == (char*)curr
 453              		.loc 1 143 5 is_stmt 1
 143:src/MemoryAllocator.cpp ****         if(currMemMerge->next != nullptr && (char*)currMemMerge + currMemMerge->size == (char*)curr
 454              		.loc 1 143 11
 455 0250 638E0700 		beqz	a5,.L38
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 456              		.loc 1 144 9
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 457              		.loc 1 144 26 is_stmt 0
 458 0254 03B78700 		ld	a4,8(a5)
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 459              		.loc 1 144 9
 460 0258 E30A07FE 		beqz	a4,.L39
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 461              		.loc 1 144 81 discriminator 1
 462 025c 83B60700 		ld	a3,0(a5)
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 463              		.loc 1 144 65 discriminator 1
 464 0260 3386D700 		add	a2,a5,a3
 144:src/MemoryAllocator.cpp ****             currMemMerge->size += currMemMerge->next->size;
 465              		.loc 1 144 42 discriminator 1
 466 0264 E314C7FE 		bne	a4,a2,.L39
 467 0268 6FF0DFFC 		j	.L45
 468              	.L38:
 147:src/MemoryAllocator.cpp ****         }else{
 148:src/MemoryAllocator.cpp ****             currMemMerge = currMemMerge->next;
 149:src/MemoryAllocator.cpp ****         }
 150:src/MemoryAllocator.cpp ****     }
 151:src/MemoryAllocator.cpp **** 
 152:src/MemoryAllocator.cpp ****     return 0;
 469              		.loc 1 152 5 is_stmt 1
 153:src/MemoryAllocator.cpp **** };...
 470              		.loc 1 153 1 is_stmt 0
 471 026c 13050000 		li	a0,0
 472              	.LVL49:
 473 0270 03348100 		ld	s0,8(sp)
 474              		.cfi_restore 8
 475              		.cfi_def_cfa 2, 16
 476 0274 13010101 		addi	sp,sp,16
 477              		.cfi_def_cfa_offset 0
 478 0278 67800000 		jr	ra
 479              		.cfi_endproc
 480              	.LFE2:
 482              		.globl	_ZN15MemoryAllocator16takenMemBlocHeadE
 483              		.globl	_ZN15MemoryAllocator15freeMemBlocHeadE
 484              		.bss
 485              		.align	3
 486              		.set	.LANCHOR0,. + 0
GAS LISTING /tmp/ccR7UfCN.s 			page 14


 489              	_ZN15MemoryAllocator15freeMemBlocHeadE:
 490 0000 00000000 		.zero	8
 490      00000000 
 493              	_ZN15MemoryAllocator16takenMemBlocHeadE:
 494 0008 00000000 		.zero	8
 494      00000000 
 495              		.text
 496              	.Letext0:
 497              		.file 2 "src/../h/../lib/hw.h"
 498              		.file 3 "src/../h/MemoryAllocator.hpp"
GAS LISTING /tmp/ccR7UfCN.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccR7UfCN.s:9      .text:0000000000000000 _ZN15MemoryAllocator8memAllocEv
     /tmp/ccR7UfCN.s:13     .text:0000000000000000 .L0 
     /tmp/ccR7UfCN.s:14     .text:0000000000000000 .L0 
     /tmp/ccR7UfCN.s:15     .text:0000000000000004 .L0 
     /tmp/ccR7UfCN.s:17     .text:0000000000000008 .L0 
     /tmp/ccR7UfCN.s:19     .text:000000000000000c .L0 
     /tmp/ccR7UfCN.s:21     .text:000000000000000c .L0 
     /tmp/ccR7UfCN.s:22     .text:000000000000000c .L0 
     /tmp/ccR7UfCN.s:27     .text:0000000000000024 .L0 
     /tmp/ccR7UfCN.s:28     .text:0000000000000024 .L0 
     /tmp/ccR7UfCN.s:32     .text:0000000000000034 .L0 
     /tmp/ccR7UfCN.s:34     .text:0000000000000038 .L0 
     /tmp/ccR7UfCN.s:35     .text:0000000000000038 .L0 
     /tmp/ccR7UfCN.s:37     .text:000000000000003c .L0 
     /tmp/ccR7UfCN.s:39     .text:0000000000000040 .L0 
     /tmp/ccR7UfCN.s:40     .text:0000000000000040 .L0 
     /tmp/ccR7UfCN.s:42     .text:0000000000000044 .L0 
     /tmp/ccR7UfCN.s:43     .text:0000000000000048 .L0 
     /tmp/ccR7UfCN.s:44     .text:0000000000000048 .L0 
     /tmp/ccR7UfCN.s:46     .text:000000000000004c .L0 
     /tmp/ccR7UfCN.s:48     .text:0000000000000050 .L0 
     /tmp/ccR7UfCN.s:54     .text:0000000000000050 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccR7UfCN.s:57     .text:0000000000000050 .L0 
     /tmp/ccR7UfCN.s:59     .text:0000000000000050 .L0 
     /tmp/ccR7UfCN.s:60     .text:0000000000000054 .L0 
     /tmp/ccR7UfCN.s:62     .text:0000000000000058 .L0 
     /tmp/ccR7UfCN.s:64     .text:000000000000005c .L0 
     /tmp/ccR7UfCN.s:66     .text:000000000000005c .L0 
     /tmp/ccR7UfCN.s:67     .text:000000000000005c .L0 
     /tmp/ccR7UfCN.s:70     .text:0000000000000064 .L0 
     /tmp/ccR7UfCN.s:71     .text:0000000000000064 .L0 
     /tmp/ccR7UfCN.s:73     .text:0000000000000068 .L0 
     /tmp/ccR7UfCN.s:75     .text:000000000000006c .L0 
     /tmp/ccR7UfCN.s:77     .text:0000000000000070 .L0 
     /tmp/ccR7UfCN.s:81     .text:0000000000000074 .L0 
     /tmp/ccR7UfCN.s:82     .text:0000000000000074 .L0 
     /tmp/ccR7UfCN.s:88     .text:0000000000000080 .L0 
     /tmp/ccR7UfCN.s:89     .text:0000000000000080 .L0 
     /tmp/ccR7UfCN.s:90     .text:0000000000000080 .L0 
     /tmp/ccR7UfCN.s:92     .text:0000000000000084 .L0 
     /tmp/ccR7UfCN.s:94     .text:0000000000000088 .L0 
     /tmp/ccR7UfCN.s:96     .text:000000000000008c .L0 
     /tmp/ccR7UfCN.s:97     .text:000000000000008c .L0 
     /tmp/ccR7UfCN.s:100    .text:0000000000000090 .L0 
     /tmp/ccR7UfCN.s:104    .text:0000000000000094 .L0 
     /tmp/ccR7UfCN.s:109    .text:000000000000009c .L0 
     /tmp/ccR7UfCN.s:113    .text:00000000000000a0 .L0 
     /tmp/ccR7UfCN.s:114    .text:00000000000000a4 .L0 
     /tmp/ccR7UfCN.s:115    .text:00000000000000a4 .L0 
     /tmp/ccR7UfCN.s:116    .text:00000000000000a4 .L0 
     /tmp/ccR7UfCN.s:118    .text:00000000000000a8 .L0 
     /tmp/ccR7UfCN.s:122    .text:00000000000000ac .L0 
     /tmp/ccR7UfCN.s:124    .text:00000000000000ac .L0 
     /tmp/ccR7UfCN.s:125    .text:00000000000000ac .L0 
     /tmp/ccR7UfCN.s:127    .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccR7UfCN.s 			page 16


     /tmp/ccR7UfCN.s:131    .text:00000000000000b4 .L0 
     /tmp/ccR7UfCN.s:132    .text:00000000000000b4 .L0 
     /tmp/ccR7UfCN.s:135    .text:00000000000000b8 .L0 
     /tmp/ccR7UfCN.s:136    .text:00000000000000b8 .L0 
     /tmp/ccR7UfCN.s:139    .text:00000000000000bc .L0 
     /tmp/ccR7UfCN.s:140    .text:00000000000000bc .L0 
     /tmp/ccR7UfCN.s:142    .text:00000000000000bc .L0 
     /tmp/ccR7UfCN.s:145    .text:00000000000000c0 .L0 
     /tmp/ccR7UfCN.s:152    .text:00000000000000c8 .L0 
     /tmp/ccR7UfCN.s:159    .text:00000000000000d0 .L0 
     /tmp/ccR7UfCN.s:163    .text:00000000000000d4 .L0 
     /tmp/ccR7UfCN.s:164    .text:00000000000000d4 .L0 
     /tmp/ccR7UfCN.s:166    .text:00000000000000d8 .L0 
     /tmp/ccR7UfCN.s:168    .text:00000000000000dc .L0 
     /tmp/ccR7UfCN.s:170    .text:00000000000000e0 .L0 
     /tmp/ccR7UfCN.s:173    .text:00000000000000e4 .L0 
     /tmp/ccR7UfCN.s:175    .text:00000000000000e8 .L0 
     /tmp/ccR7UfCN.s:176    .text:00000000000000e8 .L0 
     /tmp/ccR7UfCN.s:182    .text:00000000000000ec .L0 
     /tmp/ccR7UfCN.s:183    .text:00000000000000ec .L0 
     /tmp/ccR7UfCN.s:186    .text:00000000000000f0 .L0 
     /tmp/ccR7UfCN.s:187    .text:00000000000000f0 .L0 
     /tmp/ccR7UfCN.s:189    .text:00000000000000f8 .L0 
     /tmp/ccR7UfCN.s:192    .text:00000000000000fc .L0 
     /tmp/ccR7UfCN.s:194    .text:0000000000000100 .L0 
     /tmp/ccR7UfCN.s:198    .text:0000000000000104 .L0 
     /tmp/ccR7UfCN.s:199    .text:0000000000000104 .L0 
     /tmp/ccR7UfCN.s:201    .text:0000000000000108 .L0 
     /tmp/ccR7UfCN.s:204    .text:000000000000010c .L0 
     /tmp/ccR7UfCN.s:205    .text:000000000000010c .L0 
     /tmp/ccR7UfCN.s:206    .text:000000000000010c .L0 
     /tmp/ccR7UfCN.s:208    .text:0000000000000110 .L0 
     /tmp/ccR7UfCN.s:211    .text:0000000000000114 .L0 
     /tmp/ccR7UfCN.s:219    .text:0000000000000118 .L0 
     /tmp/ccR7UfCN.s:220    .text:0000000000000118 .L0 
     /tmp/ccR7UfCN.s:223    .text:000000000000011c .L0 
     /tmp/ccR7UfCN.s:230    .text:0000000000000128 .L0 
     /tmp/ccR7UfCN.s:232    .text:000000000000012c .L0 
     /tmp/ccR7UfCN.s:233    .text:000000000000012c .L0 
     /tmp/ccR7UfCN.s:235    .text:0000000000000130 .L0 
     /tmp/ccR7UfCN.s:238    .text:000000000000013c .L0 
     /tmp/ccR7UfCN.s:239    .text:000000000000013c .L0 
     /tmp/ccR7UfCN.s:241    .text:0000000000000140 .L0 
     /tmp/ccR7UfCN.s:242    .text:0000000000000140 .L0 
     /tmp/ccR7UfCN.s:244    .text:0000000000000144 .L0 
     /tmp/ccR7UfCN.s:248    .text:000000000000014c .L0 
     /tmp/ccR7UfCN.s:249    .text:000000000000014c .L0 
     /tmp/ccR7UfCN.s:252    .text:0000000000000150 .L0 
     /tmp/ccR7UfCN.s:253    .text:0000000000000150 .L0 
     /tmp/ccR7UfCN.s:255    .text:0000000000000154 .L0 
     /tmp/ccR7UfCN.s:256    .text:0000000000000154 .L0 
     /tmp/ccR7UfCN.s:263    .text:000000000000015c .L0 
     /tmp/ccR7UfCN.s:264    .text:000000000000015c .L0 
     /tmp/ccR7UfCN.s:266    .text:0000000000000164 .L0 
     /tmp/ccR7UfCN.s:267    .text:0000000000000164 .L0 
     /tmp/ccR7UfCN.s:273    .text:000000000000016c .L0 
     /tmp/ccR7UfCN.s:275    .text:0000000000000170 .L0 
GAS LISTING /tmp/ccR7UfCN.s 			page 17


     /tmp/ccR7UfCN.s:276    .text:0000000000000170 .L0 
     /tmp/ccR7UfCN.s:278    .text:0000000000000174 .L0 
     /tmp/ccR7UfCN.s:279    .text:0000000000000174 .L0 
     /tmp/ccR7UfCN.s:285    .text:0000000000000178 .L0 
     /tmp/ccR7UfCN.s:286    .text:0000000000000178 .L0 
     /tmp/ccR7UfCN.s:294    .text:0000000000000180 .L0 
     /tmp/ccR7UfCN.s:295    .text:0000000000000180 .L0 
     /tmp/ccR7UfCN.s:297    .text:0000000000000184 .L0 
     /tmp/ccR7UfCN.s:298    .text:0000000000000184 .L0 
     /tmp/ccR7UfCN.s:303    .text:0000000000000190 .L0 
     /tmp/ccR7UfCN.s:309    .text:0000000000000190 _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccR7UfCN.s:312    .text:0000000000000190 .L0 
     /tmp/ccR7UfCN.s:314    .text:0000000000000190 .L0 
     /tmp/ccR7UfCN.s:315    .text:0000000000000194 .L0 
     /tmp/ccR7UfCN.s:317    .text:0000000000000198 .L0 
     /tmp/ccR7UfCN.s:319    .text:000000000000019c .L0 
     /tmp/ccR7UfCN.s:321    .text:000000000000019c .L0 
     /tmp/ccR7UfCN.s:322    .text:000000000000019c .L0 
     /tmp/ccR7UfCN.s:325    .text:00000000000001a0 .L0 
     /tmp/ccR7UfCN.s:326    .text:00000000000001a0 .L0 
     /tmp/ccR7UfCN.s:329    .text:00000000000001a8 .L0 
     /tmp/ccR7UfCN.s:330    .text:00000000000001a8 .L0 
     /tmp/ccR7UfCN.s:332    .text:00000000000001ac .L0 
     /tmp/ccR7UfCN.s:336    .text:00000000000001b0 .L0 
     /tmp/ccR7UfCN.s:337    .text:00000000000001b0 .L0 
     /tmp/ccR7UfCN.s:340    .text:00000000000001b4 .L0 
     /tmp/ccR7UfCN.s:341    .text:00000000000001b4 .L0 
     /tmp/ccR7UfCN.s:342    .text:00000000000001b4 .L0 
     /tmp/ccR7UfCN.s:344    .text:00000000000001b8 .L0 
     /tmp/ccR7UfCN.s:347    .text:00000000000001bc .L0 
     /tmp/ccR7UfCN.s:350    .text:00000000000001c0 .L0 
     /tmp/ccR7UfCN.s:352    .text:00000000000001c4 .L0 
     /tmp/ccR7UfCN.s:353    .text:00000000000001c4 .L0 
     /tmp/ccR7UfCN.s:355    .text:00000000000001c8 .L0 
     /tmp/ccR7UfCN.s:360    .text:00000000000001cc .L0 
     /tmp/ccR7UfCN.s:361    .text:00000000000001cc .L0 
     /tmp/ccR7UfCN.s:363    .text:00000000000001d4 .L0 
     /tmp/ccR7UfCN.s:366    .text:00000000000001d8 .L0 
     /tmp/ccR7UfCN.s:368    .text:00000000000001dc .L0 
     /tmp/ccR7UfCN.s:372    .text:00000000000001e0 .L0 
     /tmp/ccR7UfCN.s:373    .text:00000000000001e0 .L0 
     /tmp/ccR7UfCN.s:376    .text:00000000000001e4 .L0 
     /tmp/ccR7UfCN.s:377    .text:00000000000001e4 .L0 
     /tmp/ccR7UfCN.s:378    .text:00000000000001e4 .L0 
     /tmp/ccR7UfCN.s:380    .text:00000000000001e8 .L0 
     /tmp/ccR7UfCN.s:383    .text:00000000000001ec .L0 
     /tmp/ccR7UfCN.s:389    .text:00000000000001f0 .L0 
     /tmp/ccR7UfCN.s:390    .text:00000000000001f0 .L0 
     /tmp/ccR7UfCN.s:393    .text:00000000000001f4 .L0 
     /tmp/ccR7UfCN.s:398    .text:0000000000000200 .L0 
     /tmp/ccR7UfCN.s:399    .text:0000000000000200 .L0 
     /tmp/ccR7UfCN.s:405    .text:000000000000020c .L0 
     /tmp/ccR7UfCN.s:407    .text:0000000000000210 .L0 
     /tmp/ccR7UfCN.s:408    .text:0000000000000210 .L0 
     /tmp/ccR7UfCN.s:410    .text:0000000000000214 .L0 
     /tmp/ccR7UfCN.s:411    .text:0000000000000214 .L0 
     /tmp/ccR7UfCN.s:417    .text:0000000000000218 .L0 
GAS LISTING /tmp/ccR7UfCN.s 			page 18


     /tmp/ccR7UfCN.s:418    .text:0000000000000218 .L0 
     /tmp/ccR7UfCN.s:426    .text:0000000000000224 .L0 
     /tmp/ccR7UfCN.s:427    .text:0000000000000224 .L0 
     /tmp/ccR7UfCN.s:429    .text:0000000000000228 .L0 
     /tmp/ccR7UfCN.s:430    .text:0000000000000228 .L0 
     /tmp/ccR7UfCN.s:438    .text:0000000000000234 .L0 
     /tmp/ccR7UfCN.s:439    .text:0000000000000234 .L0 
     /tmp/ccR7UfCN.s:441    .text:0000000000000238 .L0 
     /tmp/ccR7UfCN.s:444    .text:0000000000000240 .L0 
     /tmp/ccR7UfCN.s:445    .text:0000000000000240 .L0 
     /tmp/ccR7UfCN.s:447    .text:0000000000000244 .L0 
     /tmp/ccR7UfCN.s:454    .text:0000000000000250 .L0 
     /tmp/ccR7UfCN.s:455    .text:0000000000000250 .L0 
     /tmp/ccR7UfCN.s:457    .text:0000000000000254 .L0 
     /tmp/ccR7UfCN.s:458    .text:0000000000000254 .L0 
     /tmp/ccR7UfCN.s:460    .text:0000000000000258 .L0 
     /tmp/ccR7UfCN.s:462    .text:000000000000025c .L0 
     /tmp/ccR7UfCN.s:464    .text:0000000000000260 .L0 
     /tmp/ccR7UfCN.s:466    .text:0000000000000264 .L0 
     /tmp/ccR7UfCN.s:470    .text:000000000000026c .L0 
     /tmp/ccR7UfCN.s:471    .text:000000000000026c .L0 
     /tmp/ccR7UfCN.s:474    .text:0000000000000274 .L0 
     /tmp/ccR7UfCN.s:475    .text:0000000000000274 .L0 
     /tmp/ccR7UfCN.s:477    .text:0000000000000278 .L0 
     /tmp/ccR7UfCN.s:479    .text:000000000000027c .L0 
     /tmp/ccR7UfCN.s:493    .bss:0000000000000008 _ZN15MemoryAllocator16takenMemBlocHeadE
     /tmp/ccR7UfCN.s:489    .bss:0000000000000000 _ZN15MemoryAllocator15freeMemBlocHeadE
     /tmp/ccR7UfCN.s:486    .bss:0000000000000000 .LANCHOR0
     /tmp/ccR7UfCN.s:499    .text:000000000000027c .L0 
     /tmp/ccR7UfCN.s:22     .text:000000000000000c .L0 
     /tmp/ccR7UfCN.s:24     .text:0000000000000018 .L0 
     /tmp/ccR7UfCN.s:28     .text:0000000000000024 .L0 
     /tmp/ccR7UfCN.s:82     .text:0000000000000074 .L0 
     /tmp/ccR7UfCN.s:187    .text:00000000000000f0 .L0 
     /tmp/ccR7UfCN.s:223    .text:000000000000011c .L0 
     /tmp/ccR7UfCN.s:235    .text:0000000000000130 .L0 
     /tmp/ccR7UfCN.s:264    .text:000000000000015c .L0 
     /tmp/ccR7UfCN.s:298    .text:0000000000000184 .L0 
     /tmp/ccR7UfCN.s:326    .text:00000000000001a0 .L0 
     /tmp/ccR7UfCN.s:361    .text:00000000000001cc .L0 
     /tmp/ccR7UfCN.s:393    .text:00000000000001f4 .L0 
     /tmp/ccR7UfCN.s:399    .text:0000000000000200 .L0 
     /tmp/ccR7UfCN.s:418    .text:0000000000000218 .L0 
     /tmp/ccR7UfCN.s:430    .text:0000000000000228 .L0 
     /tmp/ccR7UfCN.s:102    .text:0000000000000094 .L19
     /tmp/ccR7UfCN.s:107    .text:000000000000009c .L5
     /tmp/ccR7UfCN.s:86     .text:0000000000000080 .L6
     /tmp/ccR7UfCN.s:79     .text:0000000000000074 .L4
     /tmp/ccR7UfCN.s:121    .text:00000000000000ac .L24
     /tmp/ccR7UfCN.s:148    .text:00000000000000c8 .L20
     /tmp/ccR7UfCN.s:227    .text:0000000000000128 .L9
     /tmp/ccR7UfCN.s:161    .text:00000000000000d4 .L11
     /tmp/ccR7UfCN.s:128    .text:00000000000000b4 .L8
     /tmp/ccR7UfCN.s:171    .text:00000000000000e4 .L10
     /tmp/ccR7UfCN.s:155    .text:00000000000000d0 .L21
     /tmp/ccR7UfCN.s:213    .text:0000000000000118 .L25
     /tmp/ccR7UfCN.s:259    .text:000000000000015c .L26
GAS LISTING /tmp/ccR7UfCN.s 			page 19


     /tmp/ccR7UfCN.s:270    .text:000000000000016c .L17
     /tmp/ccR7UfCN.s:196    .text:0000000000000104 .L15
     /tmp/ccR7UfCN.s:178    .text:00000000000000ec .L13
     /tmp/ccR7UfCN.s:246    .text:000000000000014c .L14
     /tmp/ccR7UfCN.s:281    .text:0000000000000178 .L16
     /tmp/ccR7UfCN.s:290    .text:0000000000000180 .L27
     /tmp/ccR7UfCN.s:111    .text:00000000000000a0 .L3
     /tmp/ccR7UfCN.s:348    .text:00000000000001c0 .L29
     /tmp/ccR7UfCN.s:334    .text:00000000000001b0 .L30
     /tmp/ccR7UfCN.s:385    .text:00000000000001f0 .L42
     /tmp/ccR7UfCN.s:395    .text:0000000000000200 .L43
     /tmp/ccR7UfCN.s:402    .text:000000000000020c .L35
     /tmp/ccR7UfCN.s:369    .text:00000000000001e0 .L33
     /tmp/ccR7UfCN.s:357    .text:00000000000001cc .L32
     /tmp/ccR7UfCN.s:413    .text:0000000000000218 .L34
     /tmp/ccR7UfCN.s:422    .text:0000000000000224 .L44
     /tmp/ccR7UfCN.s:452    .text:0000000000000250 .L37
     /tmp/ccR7UfCN.s:468    .text:000000000000026c .L38
     /tmp/ccR7UfCN.s:449    .text:000000000000024c .L39
     /tmp/ccR7UfCN.s:434    .text:0000000000000234 .L45
     /tmp/ccR7UfCN.s:887    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccR7UfCN.s:1765   .debug_str:00000000000001b6 .LASF40
     /tmp/ccR7UfCN.s:1781   .debug_str:00000000000002d7 .LASF41
     /tmp/ccR7UfCN.s:1745   .debug_str:00000000000000df .LASF42
     /tmp/ccR7UfCN.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccR7UfCN.s:496    .text:000000000000027c .Letext0
     /tmp/ccR7UfCN.s:1711   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccR7UfCN.s:1773   .debug_str:0000000000000295 .LASF0
     /tmp/ccR7UfCN.s:1753   .debug_str:000000000000013b .LASF1
     /tmp/ccR7UfCN.s:1749   .debug_str:000000000000011b .LASF2
     /tmp/ccR7UfCN.s:1727   .debug_str:000000000000004f .LASF4
     /tmp/ccR7UfCN.s:1751   .debug_str:0000000000000129 .LASF3
     /tmp/ccR7UfCN.s:1719   .debug_str:0000000000000030 .LASF5
     /tmp/ccR7UfCN.s:1713   .debug_str:0000000000000000 .LASF6
     /tmp/ccR7UfCN.s:1743   .debug_str:00000000000000cc .LASF7
     /tmp/ccR7UfCN.s:1777   .debug_str:00000000000002b1 .LASF8
     /tmp/ccR7UfCN.s:1725   .debug_str:0000000000000041 .LASF9
     /tmp/ccR7UfCN.s:1805   .debug_str:0000000000000371 .LASF10
     /tmp/ccR7UfCN.s:1775   .debug_str:00000000000002a2 .LASF11
     /tmp/ccR7UfCN.s:1795   .debug_str:0000000000000345 .LASF12
     /tmp/ccR7UfCN.s:1783   .debug_str:00000000000002ef .LASF13
     /tmp/ccR7UfCN.s:1755   .debug_str:000000000000014e .LASF14
     /tmp/ccR7UfCN.s:1737   .debug_str:000000000000007f .LASF15
     /tmp/ccR7UfCN.s:1779   .debug_str:00000000000002c1 .LASF16
     /tmp/ccR7UfCN.s:1761   .debug_str:00000000000001a2 .LASF43
     /tmp/ccR7UfCN.s:1801   .debug_str:0000000000000367 .LASF17
     /tmp/ccR7UfCN.s:1721   .debug_str:0000000000000037 .LASF18
     /tmp/ccR7UfCN.s:1717   .debug_str:0000000000000020 .LASF44
     /tmp/ccR7UfCN.s:1789   .debug_str:0000000000000311 .LASF45
     /tmp/ccR7UfCN.s:1757   .debug_str:000000000000015a .LASF46
     /tmp/ccR7UfCN.s:1797   .debug_str:0000000000000355 .LASF19
     /tmp/ccR7UfCN.s:1791   .debug_str:000000000000031a .LASF21
     /tmp/ccR7UfCN.s:1785   .debug_str:00000000000002ff .LASF20
     /tmp/ccR7UfCN.s:1747   .debug_str:00000000000000fa .LASF22
     /tmp/ccR7UfCN.s:1741   .debug_str:00000000000000bc .LASF23
     /tmp/ccR7UfCN.s:1729   .debug_str:0000000000000056 .LASF24
     /tmp/ccR7UfCN.s:1739   .debug_str:0000000000000095 .LASF25
GAS LISTING /tmp/ccR7UfCN.s 			page 20


     /tmp/ccR7UfCN.s:1759   .debug_str:000000000000017a .LASF26
     /tmp/ccR7UfCN.s:310    .text:0000000000000190 .LFB2
     /tmp/ccR7UfCN.s:480    .text:000000000000027c .LFE2
     /tmp/ccR7UfCN.s:1302   .debug_loc:0000000000000000 .LLST10
     /tmp/ccR7UfCN.s:1787   .debug_str:0000000000000308 .LASF27
     /tmp/ccR7UfCN.s:1322   .debug_loc:000000000000004e .LLST11
     /tmp/ccR7UfCN.s:1723   .debug_str:000000000000003c .LASF28
     /tmp/ccR7UfCN.s:1338   .debug_loc:0000000000000089 .LLST12
     /tmp/ccR7UfCN.s:1803   .debug_str:000000000000036c .LASF29
     /tmp/ccR7UfCN.s:1362   .debug_loc:00000000000000f9 .LLST13
     /tmp/ccR7UfCN.s:1715   .debug_str:0000000000000013 .LASF30
     /tmp/ccR7UfCN.s:1386   .debug_loc:0000000000000169 .LLST14
     /tmp/ccR7UfCN.s:1685   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccR7UfCN.s:1763   .debug_str:00000000000001ad .LASF31
     /tmp/ccR7UfCN.s:1397   .debug_loc:000000000000019f .LLST15
     /tmp/ccR7UfCN.s:1769   .debug_str:0000000000000284 .LASF32
     /tmp/ccR7UfCN.s:1421   .debug_loc:000000000000020f .LLST16
     /tmp/ccR7UfCN.s:55     .text:0000000000000050 .LFB1
     /tmp/ccR7UfCN.s:304    .text:0000000000000190 .LFE1
     /tmp/ccR7UfCN.s:1444   .debug_loc:000000000000027e .LLST0
     /tmp/ccR7UfCN.s:1799   .debug_str:000000000000035f .LASF33
     /tmp/ccR7UfCN.s:1469   .debug_loc:00000000000002e0 .LLST1
     /tmp/ccR7UfCN.s:1503   .debug_loc:0000000000000378 .LLST2
     /tmp/ccR7UfCN.s:1767   .debug_str:000000000000027a .LASF34
     /tmp/ccR7UfCN.s:1530   .debug_loc:00000000000003fa .LLST3
     /tmp/ccR7UfCN.s:1551   .debug_loc:0000000000000458 .LLST4
     /tmp/ccR7UfCN.s:1733   .debug_str:000000000000006c .LASF35
     /tmp/ccR7UfCN.s:1562   .debug_loc:000000000000048e .LLST5
     /tmp/ccR7UfCN.s:1771   .debug_str:000000000000028d .LASF36
     /tmp/ccR7UfCN.s:1593   .debug_loc:00000000000004f6 .LLST6
     /tmp/ccR7UfCN.s:1614   .debug_loc:0000000000000554 .LLST7
     /tmp/ccR7UfCN.s:1793   .debug_str:000000000000033b .LASF37
     /tmp/ccR7UfCN.s:1625   .debug_loc:000000000000058a .LLST8
     /tmp/ccR7UfCN.s:1735   .debug_str:0000000000000075 .LASF38
     /tmp/ccR7UfCN.s:1649   .debug_loc:00000000000005fa .LLST9
     /tmp/ccR7UfCN.s:1731   .debug_str:0000000000000067 .LASF39
     /tmp/ccR7UfCN.s:10     .text:0000000000000000 .LFB0
     /tmp/ccR7UfCN.s:49     .text:0000000000000050 .LFE0
     /tmp/ccR7UfCN.s:313    .text:0000000000000190 .LVL30
     /tmp/ccR7UfCN.s:323    .text:00000000000001a0 .LVL31
     /tmp/ccR7UfCN.s:472    .text:0000000000000270 .LVL49
     /tmp/ccR7UfCN.s:327    .text:00000000000001a8 .LVL32
     /tmp/ccR7UfCN.s:333    .text:00000000000001b0 .LVL33
     /tmp/ccR7UfCN.s:339    .text:00000000000001b4 .LVL34
     /tmp/ccR7UfCN.s:345    .text:00000000000001bc .LVL35
     /tmp/ccR7UfCN.s:419    .text:0000000000000220 .LVL44
     /tmp/ccR7UfCN.s:421    .text:0000000000000224 .LVL45
     /tmp/ccR7UfCN.s:433    .text:0000000000000234 .LVL47
     /tmp/ccR7UfCN.s:356    .text:00000000000001cc .LVL36
     /tmp/ccR7UfCN.s:384    .text:00000000000001f0 .LVL40
     /tmp/ccR7UfCN.s:391    .text:00000000000001f4 .LVL41
     /tmp/ccR7UfCN.s:370    .text:00000000000001e0 .LVL37
     /tmp/ccR7UfCN.s:375    .text:00000000000001e4 .LVL38
     /tmp/ccR7UfCN.s:381    .text:00000000000001ec .LVL39
     /tmp/ccR7UfCN.s:401    .text:000000000000020c .LVL42
     /tmp/ccR7UfCN.s:412    .text:0000000000000218 .LVL43
     /tmp/ccR7UfCN.s:431    .text:0000000000000230 .LVL46
GAS LISTING /tmp/ccR7UfCN.s 			page 21


     /tmp/ccR7UfCN.s:58     .text:0000000000000050 .LVL0
     /tmp/ccR7UfCN.s:85     .text:0000000000000080 .LVL3
     /tmp/ccR7UfCN.s:101    .text:0000000000000094 .LVL5
     /tmp/ccR7UfCN.s:106    .text:000000000000009c .LVL6
     /tmp/ccR7UfCN.s:78     .text:0000000000000074 .LVL1
     /tmp/ccR7UfCN.s:110    .text:00000000000000a0 .LVL7
     /tmp/ccR7UfCN.s:120    .text:00000000000000ac .LVL8
     /tmp/ccR7UfCN.s:195    .text:0000000000000104 .LVL16
     /tmp/ccR7UfCN.s:212    .text:0000000000000118 .LVL19
     /tmp/ccR7UfCN.s:269    .text:000000000000016c .LVL25
     /tmp/ccR7UfCN.s:280    .text:0000000000000178 .LVL26
     /tmp/ccR7UfCN.s:289    .text:0000000000000180 .LVL28
     /tmp/ccR7UfCN.s:299    .text:000000000000018c .LVL29
     /tmp/ccR7UfCN.s:83     .text:000000000000007c .LVL2
     /tmp/ccR7UfCN.s:177    .text:00000000000000ec .LVL15
     /tmp/ccR7UfCN.s:250    .text:0000000000000150 .LVL23
     /tmp/ccR7UfCN.s:258    .text:000000000000015c .LVL24
     /tmp/ccR7UfCN.s:129    .text:00000000000000b4 .LVL9
     /tmp/ccR7UfCN.s:147    .text:00000000000000c8 .LVL12
     /tmp/ccR7UfCN.s:154    .text:00000000000000d0 .LVL13
     /tmp/ccR7UfCN.s:133    .text:00000000000000b8 .LVL10
     /tmp/ccR7UfCN.s:137    .text:00000000000000bc .LVL11
     /tmp/ccR7UfCN.s:224    .text:0000000000000124 .LVL21
     /tmp/ccR7UfCN.s:226    .text:0000000000000128 .LVL22
     /tmp/ccR7UfCN.s:287    .text:000000000000017c .LVL27
     /tmp/ccR7UfCN.s:221    .text:000000000000011c .LVL20
     /tmp/ccR7UfCN.s:203    .text:000000000000010c .LVL17
     /tmp/ccR7UfCN.s:209    .text:0000000000000114 .LVL18
     /tmp/ccR7UfCN.s:500    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccR7UfCN.s:143    .text:00000000000000c0 .LBB3
     /tmp/ccR7UfCN.s:149    .text:00000000000000c8 .LBE3
     /tmp/ccR7UfCN.s:157    .text:00000000000000d0 .LBB4
     /tmp/ccR7UfCN.s:179    .text:00000000000000ec .LBE4
     /tmp/ccR7UfCN.s:217    .text:0000000000000118 .LBB5
     /tmp/ccR7UfCN.s:228    .text:0000000000000128 .LBE5
     /tmp/ccR7UfCN.s:190    .text:00000000000000fc .LBB8
     /tmp/ccR7UfCN.s:214    .text:0000000000000118 .LBE8
     /tmp/ccR7UfCN.s:271    .text:000000000000016c .LBB9
     /tmp/ccR7UfCN.s:282    .text:0000000000000178 .LBE9
     /tmp/ccR7UfCN.s:292    .text:0000000000000180 .LBB10
     /tmp/ccR7UfCN.s:301    .text:0000000000000190 .LBE10
     /tmp/ccR7UfCN.s:364    .text:00000000000001d8 .LBB15
     /tmp/ccR7UfCN.s:386    .text:00000000000001f0 .LBE15
     /tmp/ccR7UfCN.s:403    .text:000000000000020c .LBB16
     /tmp/ccR7UfCN.s:414    .text:0000000000000218 .LBE16
     /tmp/ccR7UfCN.s:424    .text:0000000000000224 .LBB17
     /tmp/ccR7UfCN.s:435    .text:0000000000000234 .LBE17

UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
